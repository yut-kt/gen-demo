// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen-demo/gen/model"
)

func newChild(db *gorm.DB, opts ...gen.DOOption) child {
	_child := child{}

	_child.childDo.UseDB(db, opts...)
	_child.childDo.UseModel(&model.Child{})

	tableName := _child.childDo.TableName()
	_child.ALL = field.NewAsterisk(tableName)
	_child.ID = field.NewUint32(tableName, "id")
	_child.Name = field.NewString(tableName, "name")

	_child.fillFieldMap()

	return _child
}

type child struct {
	childDo

	ALL  field.Asterisk
	ID   field.Uint32
	Name field.String

	fieldMap map[string]field.Expr
}

func (c child) Table(newTableName string) *child {
	c.childDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c child) As(alias string) *child {
	c.childDo.DO = *(c.childDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *child) updateTableName(table string) *child {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewUint32(table, "id")
	c.Name = field.NewString(table, "name")

	c.fillFieldMap()

	return c
}

func (c *child) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *child) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 2)
	c.fieldMap["id"] = c.ID
	c.fieldMap["name"] = c.Name
}

func (c child) clone(db *gorm.DB) child {
	c.childDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c child) replaceDB(db *gorm.DB) child {
	c.childDo.ReplaceDB(db)
	return c
}

type childDo struct{ gen.DO }

type IChildDo interface {
	gen.SubQuery
	Debug() IChildDo
	WithContext(ctx context.Context) IChildDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChildDo
	WriteDB() IChildDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChildDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChildDo
	Not(conds ...gen.Condition) IChildDo
	Or(conds ...gen.Condition) IChildDo
	Select(conds ...field.Expr) IChildDo
	Where(conds ...gen.Condition) IChildDo
	Order(conds ...field.Expr) IChildDo
	Distinct(cols ...field.Expr) IChildDo
	Omit(cols ...field.Expr) IChildDo
	Join(table schema.Tabler, on ...field.Expr) IChildDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChildDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChildDo
	Group(cols ...field.Expr) IChildDo
	Having(conds ...gen.Condition) IChildDo
	Limit(limit int) IChildDo
	Offset(offset int) IChildDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChildDo
	Unscoped() IChildDo
	Create(values ...*model.Child) error
	CreateInBatches(values []*model.Child, batchSize int) error
	Save(values ...*model.Child) error
	First() (*model.Child, error)
	Take() (*model.Child, error)
	Last() (*model.Child, error)
	Find() ([]*model.Child, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Child, err error)
	FindInBatches(result *[]*model.Child, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Child) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChildDo
	Assign(attrs ...field.AssignExpr) IChildDo
	Joins(fields ...field.RelationField) IChildDo
	Preload(fields ...field.RelationField) IChildDo
	FirstOrInit() (*model.Child, error)
	FirstOrCreate() (*model.Child, error)
	FindByPage(offset int, limit int) (result []*model.Child, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChildDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c childDo) Debug() IChildDo {
	return c.withDO(c.DO.Debug())
}

func (c childDo) WithContext(ctx context.Context) IChildDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c childDo) ReadDB() IChildDo {
	return c.Clauses(dbresolver.Read)
}

func (c childDo) WriteDB() IChildDo {
	return c.Clauses(dbresolver.Write)
}

func (c childDo) Session(config *gorm.Session) IChildDo {
	return c.withDO(c.DO.Session(config))
}

func (c childDo) Clauses(conds ...clause.Expression) IChildDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c childDo) Returning(value interface{}, columns ...string) IChildDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c childDo) Not(conds ...gen.Condition) IChildDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c childDo) Or(conds ...gen.Condition) IChildDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c childDo) Select(conds ...field.Expr) IChildDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c childDo) Where(conds ...gen.Condition) IChildDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c childDo) Order(conds ...field.Expr) IChildDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c childDo) Distinct(cols ...field.Expr) IChildDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c childDo) Omit(cols ...field.Expr) IChildDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c childDo) Join(table schema.Tabler, on ...field.Expr) IChildDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c childDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChildDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c childDo) RightJoin(table schema.Tabler, on ...field.Expr) IChildDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c childDo) Group(cols ...field.Expr) IChildDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c childDo) Having(conds ...gen.Condition) IChildDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c childDo) Limit(limit int) IChildDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c childDo) Offset(offset int) IChildDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c childDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChildDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c childDo) Unscoped() IChildDo {
	return c.withDO(c.DO.Unscoped())
}

func (c childDo) Create(values ...*model.Child) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c childDo) CreateInBatches(values []*model.Child, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c childDo) Save(values ...*model.Child) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c childDo) First() (*model.Child, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Child), nil
	}
}

func (c childDo) Take() (*model.Child, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Child), nil
	}
}

func (c childDo) Last() (*model.Child, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Child), nil
	}
}

func (c childDo) Find() ([]*model.Child, error) {
	result, err := c.DO.Find()
	return result.([]*model.Child), err
}

func (c childDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Child, err error) {
	buf := make([]*model.Child, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c childDo) FindInBatches(result *[]*model.Child, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c childDo) Attrs(attrs ...field.AssignExpr) IChildDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c childDo) Assign(attrs ...field.AssignExpr) IChildDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c childDo) Joins(fields ...field.RelationField) IChildDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c childDo) Preload(fields ...field.RelationField) IChildDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c childDo) FirstOrInit() (*model.Child, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Child), nil
	}
}

func (c childDo) FirstOrCreate() (*model.Child, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Child), nil
	}
}

func (c childDo) FindByPage(offset int, limit int) (result []*model.Child, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c childDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c childDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c childDo) Delete(models ...*model.Child) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *childDo) withDO(do gen.Dao) *childDo {
	c.DO = *do.(*gen.DO)
	return c
}
