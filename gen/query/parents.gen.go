// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen-demo/gen/model"
)

func newParent(db *gorm.DB, opts ...gen.DOOption) parent {
	_parent := parent{}

	_parent.parentDo.UseDB(db, opts...)
	_parent.parentDo.UseModel(&model.Parent{})

	tableName := _parent.parentDo.TableName()
	_parent.ALL = field.NewAsterisk(tableName)
	_parent.ID = field.NewUint32(tableName, "id")
	_parent.Name = field.NewString(tableName, "name")
	_parent.Child = parentHasOneChild{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Child", "model.Child"),
	}

	_parent.fillFieldMap()

	return _parent
}

type parent struct {
	parentDo

	ALL   field.Asterisk
	ID    field.Uint32
	Name  field.String
	Child parentHasOneChild

	fieldMap map[string]field.Expr
}

func (p parent) Table(newTableName string) *parent {
	p.parentDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p parent) As(alias string) *parent {
	p.parentDo.DO = *(p.parentDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *parent) updateTableName(table string) *parent {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint32(table, "id")
	p.Name = field.NewString(table, "name")

	p.fillFieldMap()

	return p
}

func (p *parent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *parent) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 3)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name

}

func (p parent) clone(db *gorm.DB) parent {
	p.parentDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p parent) replaceDB(db *gorm.DB) parent {
	p.parentDo.ReplaceDB(db)
	return p
}

type parentHasOneChild struct {
	db *gorm.DB

	field.RelationField
}

func (a parentHasOneChild) Where(conds ...field.Expr) *parentHasOneChild {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a parentHasOneChild) WithContext(ctx context.Context) *parentHasOneChild {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a parentHasOneChild) Session(session *gorm.Session) *parentHasOneChild {
	a.db = a.db.Session(session)
	return &a
}

func (a parentHasOneChild) Model(m *model.Parent) *parentHasOneChildTx {
	return &parentHasOneChildTx{a.db.Model(m).Association(a.Name())}
}

type parentHasOneChildTx struct{ tx *gorm.Association }

func (a parentHasOneChildTx) Find() (result *model.Child, err error) {
	return result, a.tx.Find(&result)
}

func (a parentHasOneChildTx) Append(values ...*model.Child) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a parentHasOneChildTx) Replace(values ...*model.Child) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a parentHasOneChildTx) Delete(values ...*model.Child) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a parentHasOneChildTx) Clear() error {
	return a.tx.Clear()
}

func (a parentHasOneChildTx) Count() int64 {
	return a.tx.Count()
}

type parentDo struct{ gen.DO }

type IParentDo interface {
	gen.SubQuery
	Debug() IParentDo
	WithContext(ctx context.Context) IParentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IParentDo
	WriteDB() IParentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IParentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IParentDo
	Not(conds ...gen.Condition) IParentDo
	Or(conds ...gen.Condition) IParentDo
	Select(conds ...field.Expr) IParentDo
	Where(conds ...gen.Condition) IParentDo
	Order(conds ...field.Expr) IParentDo
	Distinct(cols ...field.Expr) IParentDo
	Omit(cols ...field.Expr) IParentDo
	Join(table schema.Tabler, on ...field.Expr) IParentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IParentDo
	RightJoin(table schema.Tabler, on ...field.Expr) IParentDo
	Group(cols ...field.Expr) IParentDo
	Having(conds ...gen.Condition) IParentDo
	Limit(limit int) IParentDo
	Offset(offset int) IParentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IParentDo
	Unscoped() IParentDo
	Create(values ...*model.Parent) error
	CreateInBatches(values []*model.Parent, batchSize int) error
	Save(values ...*model.Parent) error
	First() (*model.Parent, error)
	Take() (*model.Parent, error)
	Last() (*model.Parent, error)
	Find() ([]*model.Parent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Parent, err error)
	FindInBatches(result *[]*model.Parent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Parent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IParentDo
	Assign(attrs ...field.AssignExpr) IParentDo
	Joins(fields ...field.RelationField) IParentDo
	Preload(fields ...field.RelationField) IParentDo
	FirstOrInit() (*model.Parent, error)
	FirstOrCreate() (*model.Parent, error)
	FindByPage(offset int, limit int) (result []*model.Parent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IParentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p parentDo) Debug() IParentDo {
	return p.withDO(p.DO.Debug())
}

func (p parentDo) WithContext(ctx context.Context) IParentDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p parentDo) ReadDB() IParentDo {
	return p.Clauses(dbresolver.Read)
}

func (p parentDo) WriteDB() IParentDo {
	return p.Clauses(dbresolver.Write)
}

func (p parentDo) Session(config *gorm.Session) IParentDo {
	return p.withDO(p.DO.Session(config))
}

func (p parentDo) Clauses(conds ...clause.Expression) IParentDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p parentDo) Returning(value interface{}, columns ...string) IParentDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p parentDo) Not(conds ...gen.Condition) IParentDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p parentDo) Or(conds ...gen.Condition) IParentDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p parentDo) Select(conds ...field.Expr) IParentDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p parentDo) Where(conds ...gen.Condition) IParentDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p parentDo) Order(conds ...field.Expr) IParentDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p parentDo) Distinct(cols ...field.Expr) IParentDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p parentDo) Omit(cols ...field.Expr) IParentDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p parentDo) Join(table schema.Tabler, on ...field.Expr) IParentDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p parentDo) LeftJoin(table schema.Tabler, on ...field.Expr) IParentDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p parentDo) RightJoin(table schema.Tabler, on ...field.Expr) IParentDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p parentDo) Group(cols ...field.Expr) IParentDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p parentDo) Having(conds ...gen.Condition) IParentDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p parentDo) Limit(limit int) IParentDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p parentDo) Offset(offset int) IParentDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p parentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IParentDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p parentDo) Unscoped() IParentDo {
	return p.withDO(p.DO.Unscoped())
}

func (p parentDo) Create(values ...*model.Parent) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p parentDo) CreateInBatches(values []*model.Parent, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p parentDo) Save(values ...*model.Parent) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p parentDo) First() (*model.Parent, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Parent), nil
	}
}

func (p parentDo) Take() (*model.Parent, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Parent), nil
	}
}

func (p parentDo) Last() (*model.Parent, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Parent), nil
	}
}

func (p parentDo) Find() ([]*model.Parent, error) {
	result, err := p.DO.Find()
	return result.([]*model.Parent), err
}

func (p parentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Parent, err error) {
	buf := make([]*model.Parent, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p parentDo) FindInBatches(result *[]*model.Parent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p parentDo) Attrs(attrs ...field.AssignExpr) IParentDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p parentDo) Assign(attrs ...field.AssignExpr) IParentDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p parentDo) Joins(fields ...field.RelationField) IParentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p parentDo) Preload(fields ...field.RelationField) IParentDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p parentDo) FirstOrInit() (*model.Parent, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Parent), nil
	}
}

func (p parentDo) FirstOrCreate() (*model.Parent, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Parent), nil
	}
}

func (p parentDo) FindByPage(offset int, limit int) (result []*model.Parent, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p parentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p parentDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p parentDo) Delete(models ...*model.Parent) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *parentDo) withDO(do gen.Dao) *parentDo {
	p.DO = *do.(*gen.DO)
	return p
}
